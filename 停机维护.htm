<!DOCTYPE html>
<!-- saved from url=(0019)https://hacpai.com/ -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        
        <title>发现一个问题</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="icon" type="image/png" href="https://hacpai.com/images/favicon.png">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
        <style>
            html {
                height: 100%;
            }
            body {
                font-family: "Helvetica Neue", "Luxi Sans", "DejaVu Sans", Tahoma, "Hiragino Sans GB", "Microsoft Yahei", sans-serif;
                background: #79a8ae;
                color: #CFEBE4;
                font-size: 18px;
                line-height: 1.6;
                letter-spacing: 1.2px;
                margin: 0;
            }
            a {
                color: #ebf7f4;
            }
            .body--ready {
                background: -webkit-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);
                background: -moz-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);
                background: -o-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);
                background: -ms-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);
                background: linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);
            }
            .text {
                position: fixed;
                bottom: 70px;
                text-align: center;
                width: 100%;
            }
            .canvas {
                margin: 0 auto;
                display: block;
            }
            .slogan {
                position: fixed;
                bottom: 50%;
                text-align: center;
                width: 100%;
                font-size: 60px;
                color: #FFF;
                text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
                display: none;
            }
        </style>
    <style>.lookupCBWEVD, .lookupforemostCBWEVD, .lookupdockedCBWEVD, .rowiframeCBWEVD, .celliframeCBWEVD, .iframeCBWEVD, .emptyCBWEVD, .barCBWEVD, .barforemostCBWEVD, .bardockedCBWEVD, .cellCBWEVD, .leftCBWEVD, .rightCBWEVD, .buttoncontainerCBWEVD, .buttonCBWEVD, .buttonimageCBWEVD, .waitingCBWEVD, .handleCBWEVD, .queryCBWEVD, .hintCBWEVD, .templateCBWEVD, .firstlevelgroupCBWEVD, .notfirstlevelgroupCBWEVD{
	    background: none !important;
	    border: 0px !important;
	    border-style: none !important;
	     color: black !important;
	     direction: ltr !important;
	     float: none !important;
	     font-family: sans-serif !important;
	     font-size: small !important;
	     font-style: normal !important;
	     font-variant: normal !important;
	     font-weight: normal !important;
	     letter-spacing: normal !important;
	     line-height: normal !important;
	     margin: 0px !important;
	    padding: 0px !important;
	    text-align: left !important;
	     text-decoration: none !important;
	     text-indent: 0px !important;
	     text-transform: none !important;
	     vertical-align: baseline !important;
	    white-space: normal !important;
}

div.lookupCBWEVD{
	     display: table !important;
	     -webkit-transition: -webkit-box-shadow 0.25s linear, border-color 0.25s linear !important;
}

div.lookupforemostCBWEVD{
}

div.lookupdockedCBWEVD{
}

div.rowiframeCBWEVD{
	     display: table-row !important;
}

div.rowiframeCBWEVD td.celliframeCBWEVD{
	      display: table-cell !important;
	      width: 100% !important;
	      height: 100% !important;
}

td.celliframeCBWEVD iframe.iframeCBWEVD{
	       display: inline !important;
	       width: 100% !important;
	       height: 100% !important;
	       background-color: white !important;
}

iframe.emptyCBWEVD{
	       background-image: url('chrome-extension://hljnlfolmbmibdjaikiaepgepgnldclj/img/128.png') !important;
	       background-position: 50% 50% !important;
	       background-repeat: no-repeat !important;
}

div.barCBWEVD{
	     display: table-row !important;
	     -webkit-transition: background 0.25s linear !important;
	     width: 100% !important;
	     cursor: move !important;
	     background: lightgrey !important;
}

div.barforemostCBWEVD{
	background: #84b7ea !important;
}

div.bardockedCBWEVD{
	background: #336699 !important;
}

div.barCBWEVD div.cellCBWEVD{
	     display: table-cell !important;
	     vertical-align: middle !important;
}

div.leftCBWEVD{
	     padding-right: 16px !important;
	     text-align: left !important;
}

div.rightCBWEVD{
	     white-space: nowrap !important;
	     text-align: right !important;
}

span.buttoncontainerCBWEVD{
	     display:inline !important;
}

a.buttonCBWEVD:link{
	     display:inline !important;
	     -webkit-user-select: none !important;
	     color: transparent !important;
}

a.buttonCBWEVD img.buttonimageCBWEVD{
	     display:inline !important;
	     vertical-align: middle !important;
}

img.waitingCBWEVD{
	     display:inline !important;
	     cursor: pointer !important;
	     -webkit-user-select: none !important;
	     vertical-align: middle !important;
	     padding-left: 6px !important;
	 padding-right: 6px !important;
}

div.handleCBWEVD{
	     display:block !important;
	     cursor: se-resize !important;
	     left: 100% !important;
	     top: 100% !important;
	     margin-left: -4px !important;
	     margin-top: -4px !important;
	     position: absolute !important;
	     width: 8px !important;
	 height: 8px !important;
}

input.queryCBWEVD{
	     display:inline-block !important;
	     background: white !important;
	     vertical-align: top !important;
	     border: 1px solid darkgrey !important;
	      font-size: 13px !important;
	      padding-top: 1px !important;
	 padding-bottom: 1px !important;
	     width: 12em !important;
}

.hintCBWEVD{
	      color: lightgrey !important;
	      font-style:italic !important;
}

select.templateCBWEVD{
	     display:inline-block !important;
	     background: white !important;
	     font-size: 13px !important;
	      border: 1px solid darkgrey !important;
	      vertical-align: top !important;
	     white-space: pre !important;
	     width: 9em !important;
	     margin-right: 2px !important;
}

optgroup.firstlevelgroupCBWEVD{
	      color: blue !important;
}

.notfirstlevelgroupCBWEVD{
	      color: black !important;
}

</style><style>.tipFIEVKI, .arrowFIEVKI, .arrowupFIEVKI, .arrowdownFIEVKI, .mainFIEVKI, .closeFIEVKI, .barFIEVKI, .rowFIEVKI, .cellFIEVKI, .leftFIEVKI, .rightFIEVKI, .displaytitleFIEVKI, .refreshFIEVKI, .pagingFIEVKI, .brandFIEVKI, .textFIEVKI, .leftlabelFIEVKI, .selectFIEVKI, .checkboxFIEVKI, .waitingFIEVKI, .buttoncontainerFIEVKI, .buttonFIEVKI, .buttonimageFIEVKI, .flagFIEVKI, .noticebarscontainerFIEVKI, .noticebarFIEVKI, .iframecontentFIEVKI{
	    background: none !important;
	    border: 0px !important;
	    border-style: none !important;
	     color: black !important;
	     direction: ltr !important;
	     float: none !important;
	     font-family: sans-serif !important;
	     font-size: small !important;
	     font-style: normal !important;
	     font-variant: normal !important;
	     font-weight: normal !important;
	     letter-spacing: normal !important;
	     line-height: normal !important;
	     margin: 0px !important;
	    padding: 0px !important;
	    text-align: left !important;
	     text-decoration: none !important;
	     text-indent: 0px !important;
	     text-transform: none !important;
	     vertical-align: baseline !important;
	    white-space: normal !important;
}

div.tipFIEVKI{
	     position: absolute !important;
	     display:block !important;
}

div.arrowFIEVKI{
	display:block !important;
}

canvas.arrowupFIEVKI{
	      display: inline !important;
	      vertical-align: bottom !important;
}

canvas.downupFIEVKI{
	      display: inline !important;
	      vertical-align: top !important;
}

div.mainFIEVKI{
	display: block !important;
}

img.closeFIEVKI{
	      display: block !important;
	      -webkit-transition: opacity 0.5s linear !important;
	      float: right !important;
	      margin-right: -5px !important;
	      margin-top: -5px !important;
}

div.barFIEVKI{
	     display: table !important;
	      margin-bottom: 4px !important;
	     -webkit-user-select: none !important;
	     width: 100% !important;
}

div.rowFIEVKI{
	display: table-row !important;
}

div.cellFIEVKI{
	      display: table-cell !important;
	      vertical-align: middle !important;
}

.leftFIEVKI{
	      padding-right: 16px !important;
	      text-align: left !important;
}

.rightFIEVKI{
	text-align: right !important;
}

span.refreshFIEVKI{
	display: inline !important;
}

span.pagingFIEVKI{
	      display: inline !important;
	      font-size: x-small !important;
}

span.buttoncontainerFIEVKI{
	display: inline !important;
}

span.displaytitleFIEVKI{
	      display: inline !important;
	      padding-left: 6px !important;
	      font-size: small !important;
	      font-weight: bold !important;
}

span.displaytitleFIEVKI a:link{
	       display: inline !important;
	       color: #0645AD !important;
	       text-decoration: none !important;
}

span.displaytitleFIEVKI img{
	display: inline !important;
}

span.brandFIEVKI{
	      display: inline !important;
	      font-size: x-small !important;
}

.brandFIEVKI a{
	       display: inline !important;
	       font-size: x-small !important;
}

.brandFIEVKI a:link{
	       display: inline !important;
	       color: #0645AD !important;
	       text-decoration: none !important;
}

.brandFIEVKI a:visited{
	       display: inline !important;
	       color: #0B0080 !important;
	       text-decoration: none !important;
}

span.textFIEVKI{
	      display: inline !important;
	      font-size: x-small !important;
}

label.leftlabelFIEVKI{
	      display: inline !important;
	      font-size: x-small !important;
	      margin-right: 3px !important;
}

select.selectFIEVKI{
	       display: inline-block !important;
	       border: 1px solid darkgrey !important;
	       white-space: pre !important;
	       font-size: x-small !important;
}

input.checkboxFIEVKI{
	      display: inline-block !important;
	      vertical-align: text-top !important;
	      font-size: x-small !important;
	      margin-right: 0.3em !important;
}

img.waitingFIEVKI{
	      display: inline !important;
	      -webkit-user-select: none !important;
	      vertical-align: middle !important;
	      padding-left: 3px !important;
}

a.buttonFIEVKI, a.buttonFIEVKI:link{
	      display: inline !important;
	      -webkit-user-select: none !important;
	      color: transparent !important;
	      margin-right: 2px !important;
}

img.buttonimageFIEVKI{
	      display: inline !important;
	      vertical-align: middle !important;
}

img.flagFIEVKI{
	      display: inline !important;
	      vertical-align: middle !important;
	      padding-bottom:2px !important;
}

img.buttonselectedFIEVKI{
	      display: inline !important;
	      background: #dd8 !important;
	      border: 1px solid #bb6 !important;
	      margin: -1px !important;
	      border-radius: 2px !important;
}

div.noticebarscontainerFIEVKI{
	     display: block !important;
	     text-align: left !important;
	     margin-bottom: 4px !important;
	     overflow-y: auto !important;
}

div.noticebarFIEVKI{
	     display: block !important;
	     background: white !important;
	     font-size: x-small !important;
	     border-left: 3px solid lightGrey !important;
	     margin-bottom: 1px !important;
	     padding-left: 2px !important;
}

div.noticebarFIEVKI img{
	      display: inline !important;
	      margin-right: 1px !important;
	      vertical-align: text-top !important;
}

div.noticebarFIEVKI a{
	      display: inline !important;
	      font-family: sans-serif !important;
	       font-style: normal !important;
	       font-variant: normal !important;
	       font-weight: normal !important;
	       font-size: x-small !important;
}

div.noticebarFIEVKI a:link{
	      display: inline !important;
	      color: #0645AD !important;
	      text-decoration: none !important;
}

div.noticebarFIEVKI a:visited{
	      display: inline !important;
	      color: #0B0080 !important;
	      text-decoration: none !important;
}

iframe.iframecontentFIEVKI{
	     display: inline !important;
	     width: 100% !important;
}

</style><style id="simplehl_hlstyle_OPFDQM">.simplehl1_BAVCIH { display: inline!important;font-family:inherit!important; font-style:inherit!important; font-variant:inherit!important; font-weight:inherit!important; border-color: transparent !important; color: #000000!important; background-color: rgba(255,0,0,0.7)!important; font-size: inherit!important; -webkit-transition-property: color, background-color, -webkit-box-shadow; -webkit-transition-duration: 0.5s, 0.5s, 0.5s; -webkit-transition-timing-function: linear, linear, linear; padding: 0.2em!important; -webkit-box-shadow: rgba(0,0,0,0.42) 3px 3px 4px!important; border-radius: 6px!important; } .simplehl2_BAVCIH { display: inline!important;font-family:inherit!important; font-style:inherit!important; font-variant:inherit!important; font-weight:inherit!important; border-color: transparent !important; color: #000000!important; background-color: rgba(255,165,0,0.7)!important; font-size: inherit!important; -webkit-transition-property: color, background-color, -webkit-box-shadow; -webkit-transition-duration: 0.5s, 0.5s, 0.5s; -webkit-transition-timing-function: linear, linear, linear; padding: 0.2em!important; -webkit-box-shadow: rgba(0,0,0,0.42) 3px 3px 4px!important; border-radius: 6px!important; } .simplehl3_BAVCIH { display: inline!important;font-family:inherit!important; font-style:inherit!important; font-variant:inherit!important; font-weight:inherit!important; border-color: transparent !important; color: #000000!important; background-color: rgba(255,255,96,0.7)!important; font-size: inherit!important; -webkit-transition-property: color, background-color, -webkit-box-shadow; -webkit-transition-duration: 0.5s, 0.5s, 0.5s; -webkit-transition-timing-function: linear, linear, linear; padding: 0.2em!important; -webkit-box-shadow: rgba(0,0,0,0.42) 3px 3px 4px!important; border-radius: 6px!important; } .simplehl4_BAVCIH { display: inline!important;font-family:inherit!important; font-style:inherit!important; font-variant:inherit!important; font-weight:inherit!important; border-color: transparent !important; color: #000000!important; background-color: rgba(96,255,96,0.7)!important; font-size: inherit!important; -webkit-transition-property: color, background-color, -webkit-box-shadow; -webkit-transition-duration: 0.5s, 0.5s, 0.5s; -webkit-transition-timing-function: linear, linear, linear; padding: 0.2em!important; -webkit-box-shadow: rgba(0,0,0,0.42) 3px 3px 4px!important; border-radius: 6px!important; } .simplehl5_BAVCIH { display: inline!important;font-family:inherit!important; font-style:inherit!important; font-variant:inherit!important; font-weight:inherit!important; border-color: transparent !important; color: #000000!important; background-color: rgba(96,255,255,0.7)!important; font-size: inherit!important; -webkit-transition-property: color, background-color, -webkit-box-shadow; -webkit-transition-duration: 0.5s, 0.5s, 0.5s; -webkit-transition-timing-function: linear, linear, linear; padding: 0.2em!important; -webkit-box-shadow: rgba(0,0,0,0.42) 3px 3px 4px!important; border-radius: 6px!important; } .simplehl6_BAVCIH { display: inline!important;font-family:inherit!important; font-style:inherit!important; font-variant:inherit!important; font-weight:inherit!important; border-color: transparent !important; color: #000000!important; background-color: rgba(255,96,255,0.7)!important; font-size: inherit!important; -webkit-transition-property: color, background-color, -webkit-box-shadow; -webkit-transition-duration: 0.5s, 0.5s, 0.5s; -webkit-transition-timing-function: linear, linear, linear; padding: 0.2em!important; -webkit-box-shadow: rgba(0,0,0,0.42) 3px 3px 4px!important; border-radius: 6px!important; } .simplehl7_BAVCIH { display: inline!important;font-family:inherit!important; font-style:inherit!important; font-variant:inherit!important; font-weight:inherit!important; border-color: transparent !important; color: #ffffff!important; background-color: rgba(0,0,0,0.7)!important; font-size: inherit!important; -webkit-transition-property: color, background-color, -webkit-box-shadow; -webkit-transition-duration: 0.5s, 0.5s, 0.5s; -webkit-transition-timing-function: linear, linear, linear; padding: 0.2em!important; -webkit-box-shadow: rgba(0,0,0,0.42) 3px 3px 4px!important; border-radius: 6px!important; } </style><style id="simplehl_flashstyle_QBFNZQ">@-webkit-keyframes flash {         0% {             opacity: 1;         }         100% {             opacity: 0;         }}</style></head>

    <body class="body--ready">
        <canvas class="canvas" width="1276" height="636"></canvas>
        <p class="slogan">HacPai</p>
        <p class="text">
            非常抱歉，加载出现了点问题<br>
            请稍后尝试刷新，如果还不能使用，<a href="http://www.mindasset.com/">联系我们</a>吧！
        </p>
        <script>
            var S = {
                init: function () {
                    S.Drawing.init('.canvas');
                    document.body.classList.add('body--ready');
                    var text = '停机|维护|稍等片刻|期待您的加入|嗨起来|#countdown 3|#icon thumbs-up';
                    if (window.innerWidth < 600) {
                        text = 'M|i|n|d|A|s|s|e|t';
                    }
                    S.UI.simulate(text);
                    S.Drawing.loop(function () {
                        S.Shape.render();
                    });
                }
            };


            S.Drawing = (function () {
                var canvas,
                        context,
                        renderFn,
                        requestFrame = window.requestAnimationFrame ||
                        window.webkitRequestAnimationFrame ||
                        window.mozRequestAnimationFrame ||
                        window.oRequestAnimationFrame ||
                        window.msRequestAnimationFrame ||
                        function (callback) {
                            window.setTimeout(callback, 1000 / 60);
                        };

                return {
                    init: function (el) {
                        canvas = document.querySelector(el);
                        context = canvas.getContext('2d');
                        this.adjustCanvas();

                        window.addEventListener('resize', function (e) {
                            S.Drawing.adjustCanvas();
                        });
                    },
                    loop: function (fn) {
                        renderFn = !renderFn ? fn : renderFn;
                        this.clearFrame();
                        renderFn();
                        requestFrame.call(window, this.loop.bind(this));
                    },
                    adjustCanvas: function () {
                        canvas.width = window.innerWidth;
                        canvas.height = window.innerHeight;
                    },
                    clearFrame: function () {
                        context.clearRect(0, 0, canvas.width, canvas.height);
                    },
                    getArea: function () {
                        return {w: canvas.width, h: canvas.height};
                    },
                    drawCircle: function (p, c) {
                        context.fillStyle = c.render();
                        context.beginPath();
                        context.arc(p.x, p.y, p.z, 0, 2 * Math.PI, true);
                        context.closePath();
                        context.fill();
                    }
                };
            }());


            S.UI = (function () {
                var interval,
                        currentAction,
                        time,
                        maxShapeSize = 30,
                        sequence = [],
                        cmd = '#';

                function formatTime(date) {
                    var h = date.getHours(),
                            m = date.getMinutes(),
                            m = m < 10 ? '0' + m : m;
                    return h + ':' + m;
                }

                function getValue(value) {
                    return value && value.split(' ')[1];
                }

                function getAction(value) {
                    value = value && value.split(' ')[0];
                    return value && value[0] === cmd && value.substring(1);
                }

                function timedAction(fn, delay, max, reverse) {
                    clearInterval(interval);
                    currentAction = reverse ? max : 1;
                    fn(currentAction);

                    if (!max || (!reverse && currentAction < max) || (reverse && currentAction > 0)) {
                        interval = setInterval(function () {
                            currentAction = reverse ? currentAction - 1 : currentAction + 1;
                            fn(currentAction);

                            if ((!reverse && max && currentAction === max) || (reverse && currentAction === 0)) {
                                clearInterval(interval);
                            }
                        }, delay);
                    }
                }

                function performAction(value) {
                    var action,
                            value,
                            current;

                    sequence = typeof (value) === 'object' ? value : sequence.concat(value.split('|'));

                    timedAction(function (index) {
                        current = sequence.shift();
                        action = getAction(current);
                        value = getValue(current);

                        switch (action) {
                            case 'countdown':
                                value = parseInt(value) || 10;
                                value = value > 0 ? value : 10;

                                timedAction(function (index) {
                                    if (index === 0) {
                                        if (sequence.length === 0) {
                                            S.Shape.switchShape(S.ShapeBuilder.letter(''));
                                        } else {
                                            performAction(sequence);
                                        }
                                    } else {
                                        S.Shape.switchShape(S.ShapeBuilder.letter(index), true);
                                    }
                                }, 1000, value, true);
                                break;

                            case 'rectangle':
                                value = value && value.split('x');
                                value = (value && value.length === 2) ? value : [maxShapeSize, maxShapeSize / 2];

                                S.Shape.switchShape(S.ShapeBuilder.rectangle(Math.min(maxShapeSize, parseInt(value[0])), Math.min(maxShapeSize, parseInt(value[1]))));
                                break;

                            case 'circle':
                                value = parseInt(value) || maxShapeSize;
                                value = Math.min(value, maxShapeSize);
                                S.Shape.switchShape(S.ShapeBuilder.circle(value));
                                break;

                            case 'time':
                                var t = formatTime(new Date());

                                if (sequence.length > 0) {
                                    S.Shape.switchShape(S.ShapeBuilder.letter(t));
                                } else {
                                    timedAction(function () {
                                        t = formatTime(new Date());
                                        if (t !== time) {
                                            time = t;
                                            S.Shape.switchShape(S.ShapeBuilder.letter(time));
                                        }
                                    }, 1000);
                                }
                                break;

                            default:
                                S.Shape.switchShape(S.ShapeBuilder.letter(current[0] === cmd ? 'MindAsset' : current));
                                if (current === '') {
                                    setTimeout(function () {
                                        document.querySelector('.slogan').style.display = 'block';
                                    }, 1000 / 60);
                                }
                        }
                    }, 2000, sequence.length);
                }

                return {
                    simulate: function (action) {
                        performAction(action);
                    }
                };
            }());


            S.Point = function (args) {
                this.x = args.x;
                this.y = args.y;
                this.z = args.z;
                this.a = args.a;
                this.h = args.h;
            };


            S.Color = function (r, g, b, a) {
                this.r = r;
                this.g = g;
                this.b = b;
                this.a = a;
            };

            S.Color.prototype = {
                render: function () {
                    return 'rgba(' + this.r + ',' + +this.g + ',' + this.b + ',' + this.a + ')';
                }
            };


            S.Dot = function (x, y) {
                this.p = new S.Point({
                    x: x,
                    y: y,
                    z: 5,
                    a: 1,
                    h: 0
                });

                this.e = 0.07;
                this.s = true;

                this.c = new S.Color(255, 255, 255, this.p.a);

                this.t = this.clone();
                this.q = [];
            };

            S.Dot.prototype = {
                clone: function () {
                    return new S.Point({
                        x: this.x,
                        y: this.y,
                        z: this.z,
                        a: this.a,
                        h: this.h
                    });
                },
                _draw: function () {
                    this.c.a = this.p.a;
                    S.Drawing.drawCircle(this.p, this.c);
                },
                _moveTowards: function (n) {
                    var details = this.distanceTo(n, true),
                            dx = details[0],
                            dy = details[1],
                            d = details[2],
                            e = this.e * d;

                    if (this.p.h === -1) {
                        this.p.x = n.x;
                        this.p.y = n.y;
                        return true;
                    }

                    if (d > 1) {
                        this.p.x -= ((dx / d) * e);
                        this.p.y -= ((dy / d) * e);
                    } else {
                        if (this.p.h > 0) {
                            this.p.h--;
                        } else {
                            return true;
                        }
                    }

                    return false;
                },
                _update: function () {
                    if (this._moveTowards(this.t)) {
                        var p = this.q.shift();

                        if (p) {
                            this.t.x = p.x || this.p.x;
                            this.t.y = p.y || this.p.y;
                            this.t.z = p.z || this.p.z;
                            this.t.a = p.a || this.p.a;
                            this.p.h = p.h || 0;
                        } else {
                            if (this.s) {
                                this.p.x -= Math.sin(Math.random() * 3.142);
                                this.p.y -= Math.sin(Math.random() * 3.142);
                            } else {
                                this.move(new S.Point({
                                    x: this.p.x + (Math.random() * 50) - 25,
                                    y: this.p.y + (Math.random() * 50) - 25
                                }));
                            }
                        }
                    }

                    d = this.p.a - this.t.a;
                    this.p.a = Math.max(0.1, this.p.a - (d * 0.05));
                    d = this.p.z - this.t.z;
                    this.p.z = Math.max(1, this.p.z - (d * 0.05));
                },
                distanceTo: function (n, details) {
                    var dx = this.p.x - n.x,
                            dy = this.p.y - n.y,
                            d = Math.sqrt(dx * dx + dy * dy);

                    return details ? [dx, dy, d] : d;
                },
                move: function (p, avoidStatic) {
                    if (!avoidStatic || (avoidStatic && this.distanceTo(p) > 1)) {
                        this.q.push(p);
                    }
                },
                render: function () {
                    this._update();
                    this._draw();
                }
            };


            S.ShapeBuilder = (function () {
                var gap = 13,
                        shapeCanvas = document.createElement('canvas'),
                        shapeContext = shapeCanvas.getContext('2d'),
                        fontSize = 500,
                        fontFamily = 'Avenir, Helvetica Neue, Helvetica, Arial, sans-serif';

                function fit() {
                    shapeCanvas.width = Math.floor(window.innerWidth / gap) * gap;
                    shapeCanvas.height = Math.floor(window.innerHeight / gap) * gap;
                    shapeContext.fillStyle = 'red';
                    shapeContext.textBaseline = 'middle';
                    shapeContext.textAlign = 'center';
                }

                function processCanvas() {
                    var pixels = shapeContext.getImageData(0, 0, shapeCanvas.width, shapeCanvas.height).data;
                    dots = [],
                            pixels,
                            x = 0,
                            y = 0,
                            fx = shapeCanvas.width,
                            fy = shapeCanvas.height,
                            w = 0,
                            h = 0;

                    for (var p = 0; p < pixels.length; p += (4 * gap)) {
                        if (pixels[p + 3] > 0) {
                            dots.push(new S.Point({
                                x: x,
                                y: y
                            }));

                            w = x > w ? x : w;
                            h = y > h ? y : h;
                            fx = x < fx ? x : fx;
                            fy = y < fy ? y : fy;
                        }

                        x += gap;

                        if (x >= shapeCanvas.width) {
                            x = 0;
                            y += gap;
                            p += gap * 4 * shapeCanvas.width;
                        }
                    }

                    return {dots: dots, w: w + fx, h: h + fy};
                }

                function setFontSize(s) {
                    shapeContext.font = 'bold ' + s + 'px ' + fontFamily;
                }

                function isNumber(n) {
                    return !isNaN(parseFloat(n)) && isFinite(n);
                }

                function init() {
                    fit();
                    window.addEventListener('resize', fit);
                }

                // Init
                init();

                return {
                    imageFile: function (url, callback) {
                        var image = new Image(),
                                a = S.Drawing.getArea();

                        image.onload = function () {
                            shapeContext.clearRect(0, 0, shapeCanvas.width, shapeCanvas.height);
                            shapeContext.drawImage(this, 0, 0, a.h * 0.6, a.h * 0.6);
                            callback(processCanvas());
                        };

                        image.onerror = function () {
                            callback(S.ShapeBuilder.letter('What?'));
                        };

                        image.src = url;
                    },
                    circle: function (d) {
                        var r = Math.max(0, d) / 2;
                        shapeContext.clearRect(0, 0, shapeCanvas.width, shapeCanvas.height);
                        shapeContext.beginPath();
                        shapeContext.arc(r * gap, r * gap, r * gap, 0, 2 * Math.PI, false);
                        shapeContext.fill();
                        shapeContext.closePath();

                        return processCanvas();
                    },
                    letter: function (l) {
                        var s = 0;

                        setFontSize(fontSize);
                        s = Math.min(fontSize,
                                (shapeCanvas.width / shapeContext.measureText(l).width) * 0.8 * fontSize,
                                (shapeCanvas.height / fontSize) * (isNumber(l) ? 1 : 0.45) * fontSize);
                        setFontSize(s);

                        shapeContext.clearRect(0, 0, shapeCanvas.width, shapeCanvas.height);
                        shapeContext.fillText(l, shapeCanvas.width / 2, shapeCanvas.height / 2);

                        return processCanvas();
                    },
                    rectangle: function (w, h) {
                        var dots = [],
                                width = gap * w,
                                height = gap * h;

                        for (var y = 0; y < height; y += gap) {
                            for (var x = 0; x < width; x += gap) {
                                dots.push(new S.Point({
                                    x: x,
                                    y: y
                                }));
                            }
                        }

                        return {dots: dots, w: width, h: height};
                    }
                };
            }());


            S.Shape = (function () {
                var dots = [],
                        width = 0,
                        height = 0,
                        cx = 0,
                        cy = 0;

                function compensate() {
                    var a = S.Drawing.getArea();

                    cx = a.w / 2 - width / 2;
                    cy = a.h / 2 - height / 2;
                }

                return {
                    shuffleIdle: function () {
                        var a = S.Drawing.getArea();

                        for (var d = 0; d < dots.length; d++) {
                            if (!dots[d].s) {
                                dots[d].move({
                                    x: Math.random() * a.w,
                                    y: Math.random() * a.h
                                });
                            }
                        }
                    },
                    switchShape: function (n, fast) {
                        var size,
                                a = S.Drawing.getArea();

                        width = n.w;
                        height = n.h;

                        compensate();

                        if (n.dots.length > dots.length) {
                            size = n.dots.length - dots.length;
                            for (var d = 1; d <= size; d++) {
                                dots.push(new S.Dot(a.w / 2, a.h / 2));
                            }
                        }

                        var d = 0,
                                i = 0;

                        while (n.dots.length > 0) {
                            i = Math.floor(Math.random() * n.dots.length);
                            dots[d].e = fast ? 0.25 : (dots[d].s ? 0.14 : 0.11);

                            if (dots[d].s) {
                                dots[d].move(new S.Point({
                                    z: Math.random() * 20 + 10,
                                    a: Math.random(),
                                    h: 18
                                }));
                            } else {
                                dots[d].move(new S.Point({
                                    z: Math.random() * 5 + 5,
                                    h: fast ? 18 : 30
                                }));
                            }

                            dots[d].s = true;
                            dots[d].move(new S.Point({
                                x: n.dots[i].x + cx,
                                y: n.dots[i].y + cy,
                                a: 1,
                                z: 5,
                                h: 0
                            }));

                            n.dots = n.dots.slice(0, i).concat(n.dots.slice(i + 1));
                            d++;
                        }

                        for (var i = d; i < dots.length; i++) {
                            if (dots[i].s) {
                                dots[i].move(new S.Point({
                                    z: Math.random() * 20 + 10,
                                    a: Math.random(),
                                    h: 20
                                }));

                                dots[i].s = false;
                                dots[i].e = 0.04;
                                dots[i].move(new S.Point({
                                    x: Math.random() * a.w,
                                    y: Math.random() * a.h,
                                    a: 0.3, //.4
                                    z: Math.random() * 4,
                                    h: 0
                                }));
                            }
                        }
                    },
                    render: function () {
                        for (var d = 0; d < dots.length; d++) {
                            dots[d].render();
                        }
                    }
                };
            }());
            S.init();
        </script>
    
</body></html>